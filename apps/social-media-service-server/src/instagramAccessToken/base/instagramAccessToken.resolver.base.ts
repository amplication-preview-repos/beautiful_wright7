/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InstagramAccessToken } from "./InstagramAccessToken";
import { InstagramAccessTokenCountArgs } from "./InstagramAccessTokenCountArgs";
import { InstagramAccessTokenFindManyArgs } from "./InstagramAccessTokenFindManyArgs";
import { InstagramAccessTokenFindUniqueArgs } from "./InstagramAccessTokenFindUniqueArgs";
import { CreateInstagramAccessTokenArgs } from "./CreateInstagramAccessTokenArgs";
import { UpdateInstagramAccessTokenArgs } from "./UpdateInstagramAccessTokenArgs";
import { DeleteInstagramAccessTokenArgs } from "./DeleteInstagramAccessTokenArgs";
import { InstagramAccessTokenService } from "../instagramAccessToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InstagramAccessToken)
export class InstagramAccessTokenResolverBase {
  constructor(
    protected readonly service: InstagramAccessTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "read",
    possession: "any",
  })
  async _instagramAccessTokensMeta(
    @graphql.Args() args: InstagramAccessTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InstagramAccessToken])
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "read",
    possession: "any",
  })
  async instagramAccessTokens(
    @graphql.Args() args: InstagramAccessTokenFindManyArgs
  ): Promise<InstagramAccessToken[]> {
    return this.service.instagramAccessTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InstagramAccessToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "read",
    possession: "own",
  })
  async instagramAccessToken(
    @graphql.Args() args: InstagramAccessTokenFindUniqueArgs
  ): Promise<InstagramAccessToken | null> {
    const result = await this.service.instagramAccessToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstagramAccessToken)
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "create",
    possession: "any",
  })
  async createInstagramAccessToken(
    @graphql.Args() args: CreateInstagramAccessTokenArgs
  ): Promise<InstagramAccessToken> {
    return await this.service.createInstagramAccessToken({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstagramAccessToken)
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "update",
    possession: "any",
  })
  async updateInstagramAccessToken(
    @graphql.Args() args: UpdateInstagramAccessTokenArgs
  ): Promise<InstagramAccessToken | null> {
    try {
      return await this.service.updateInstagramAccessToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstagramAccessToken)
  @nestAccessControl.UseRoles({
    resource: "InstagramAccessToken",
    action: "delete",
    possession: "any",
  })
  async deleteInstagramAccessToken(
    @graphql.Args() args: DeleteInstagramAccessTokenArgs
  ): Promise<InstagramAccessToken | null> {
    try {
      return await this.service.deleteInstagramAccessToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
