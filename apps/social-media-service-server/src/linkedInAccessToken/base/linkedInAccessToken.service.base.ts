/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LinkedInAccessToken as PrismaLinkedInAccessToken,
} from "@prisma/client";

export class LinkedInAccessTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LinkedInAccessTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.linkedInAccessToken.count(args);
  }

  async linkedInAccessTokens<T extends Prisma.LinkedInAccessTokenFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LinkedInAccessTokenFindManyArgs>
  ): Promise<PrismaLinkedInAccessToken[]> {
    return this.prisma.linkedInAccessToken.findMany<Prisma.LinkedInAccessTokenFindManyArgs>(
      args
    );
  }
  async linkedInAccessToken<T extends Prisma.LinkedInAccessTokenFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LinkedInAccessTokenFindUniqueArgs>
  ): Promise<PrismaLinkedInAccessToken | null> {
    return this.prisma.linkedInAccessToken.findUnique(args);
  }
  async createLinkedInAccessToken<
    T extends Prisma.LinkedInAccessTokenCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LinkedInAccessTokenCreateArgs>
  ): Promise<PrismaLinkedInAccessToken> {
    return this.prisma.linkedInAccessToken.create<T>(args);
  }
  async updateLinkedInAccessToken<
    T extends Prisma.LinkedInAccessTokenUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LinkedInAccessTokenUpdateArgs>
  ): Promise<PrismaLinkedInAccessToken> {
    return this.prisma.linkedInAccessToken.update<T>(args);
  }
  async deleteLinkedInAccessToken<
    T extends Prisma.LinkedInAccessTokenDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LinkedInAccessTokenDeleteArgs>
  ): Promise<PrismaLinkedInAccessToken> {
    return this.prisma.linkedInAccessToken.delete(args);
  }
}
