/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TwitterAccessTokenService } from "../twitterAccessToken.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TwitterAccessTokenCreateInput } from "./TwitterAccessTokenCreateInput";
import { TwitterAccessToken } from "./TwitterAccessToken";
import { TwitterAccessTokenFindManyArgs } from "./TwitterAccessTokenFindManyArgs";
import { TwitterAccessTokenWhereUniqueInput } from "./TwitterAccessTokenWhereUniqueInput";
import { TwitterAccessTokenUpdateInput } from "./TwitterAccessTokenUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TwitterAccessTokenControllerBase {
  constructor(
    protected readonly service: TwitterAccessTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TwitterAccessToken })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTwitterAccessToken(
    @common.Body() data: TwitterAccessTokenCreateInput
  ): Promise<TwitterAccessToken> {
    return await this.service.createTwitterAccessToken({
      data: data,
      select: {
        accessToken: true,
        createdAt: true,
        expirationDate: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TwitterAccessToken] })
  @ApiNestedQuery(TwitterAccessTokenFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async twitterAccessTokens(
    @common.Req() request: Request
  ): Promise<TwitterAccessToken[]> {
    const args = plainToClass(TwitterAccessTokenFindManyArgs, request.query);
    return this.service.twitterAccessTokens({
      ...args,
      select: {
        accessToken: true,
        createdAt: true,
        expirationDate: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TwitterAccessToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async twitterAccessToken(
    @common.Param() params: TwitterAccessTokenWhereUniqueInput
  ): Promise<TwitterAccessToken | null> {
    const result = await this.service.twitterAccessToken({
      where: params,
      select: {
        accessToken: true,
        createdAt: true,
        expirationDate: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TwitterAccessToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTwitterAccessToken(
    @common.Param() params: TwitterAccessTokenWhereUniqueInput,
    @common.Body() data: TwitterAccessTokenUpdateInput
  ): Promise<TwitterAccessToken | null> {
    try {
      return await this.service.updateTwitterAccessToken({
        where: params,
        data: data,
        select: {
          accessToken: true,
          createdAt: true,
          expirationDate: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TwitterAccessToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTwitterAccessToken(
    @common.Param() params: TwitterAccessTokenWhereUniqueInput
  ): Promise<TwitterAccessToken | null> {
    try {
      return await this.service.deleteTwitterAccessToken({
        where: params,
        select: {
          accessToken: true,
          createdAt: true,
          expirationDate: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
