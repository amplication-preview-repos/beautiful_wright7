/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TwitterAccessToken } from "./TwitterAccessToken";
import { TwitterAccessTokenCountArgs } from "./TwitterAccessTokenCountArgs";
import { TwitterAccessTokenFindManyArgs } from "./TwitterAccessTokenFindManyArgs";
import { TwitterAccessTokenFindUniqueArgs } from "./TwitterAccessTokenFindUniqueArgs";
import { CreateTwitterAccessTokenArgs } from "./CreateTwitterAccessTokenArgs";
import { UpdateTwitterAccessTokenArgs } from "./UpdateTwitterAccessTokenArgs";
import { DeleteTwitterAccessTokenArgs } from "./DeleteTwitterAccessTokenArgs";
import { TwitterAccessTokenService } from "../twitterAccessToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TwitterAccessToken)
export class TwitterAccessTokenResolverBase {
  constructor(
    protected readonly service: TwitterAccessTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "read",
    possession: "any",
  })
  async _twitterAccessTokensMeta(
    @graphql.Args() args: TwitterAccessTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TwitterAccessToken])
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "read",
    possession: "any",
  })
  async twitterAccessTokens(
    @graphql.Args() args: TwitterAccessTokenFindManyArgs
  ): Promise<TwitterAccessToken[]> {
    return this.service.twitterAccessTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TwitterAccessToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "read",
    possession: "own",
  })
  async twitterAccessToken(
    @graphql.Args() args: TwitterAccessTokenFindUniqueArgs
  ): Promise<TwitterAccessToken | null> {
    const result = await this.service.twitterAccessToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TwitterAccessToken)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "create",
    possession: "any",
  })
  async createTwitterAccessToken(
    @graphql.Args() args: CreateTwitterAccessTokenArgs
  ): Promise<TwitterAccessToken> {
    return await this.service.createTwitterAccessToken({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TwitterAccessToken)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "update",
    possession: "any",
  })
  async updateTwitterAccessToken(
    @graphql.Args() args: UpdateTwitterAccessTokenArgs
  ): Promise<TwitterAccessToken | null> {
    try {
      return await this.service.updateTwitterAccessToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TwitterAccessToken)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccessToken",
    action: "delete",
    possession: "any",
  })
  async deleteTwitterAccessToken(
    @graphql.Args() args: DeleteTwitterAccessTokenArgs
  ): Promise<TwitterAccessToken | null> {
    try {
      return await this.service.deleteTwitterAccessToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
